//Following programme check if given binary tree is a binary search tree or not

#include<iostream>
#include<queue>
#include<vector>
using namespace std;
struct node {
    int data;
    node* left;
    node* right;
};
node* get_new_node(int a){
    node* temp = new node;
    temp->data=a;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
node* insert(node* root,int a){
    
    if(root==NULL){
        root=get_new_node(a);
    }
    else if(a<=root->data){
        root->left= insert(root->left,a);
    }
    else{
        root->right=insert(root->right,a);
    }
    return root;
}

void inorder(node* root){
    if(root==NULL){
        return ;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
    
}
bool isbstutil(node* root,int min,int max){
    if(root==NULL){        //empty tree is a bst
        return true;
    }
    if(root->data < min || root->data > max){   //Condition for not being a bst
        return false;
    }
    //checking both left and right subtrees for bst
    return(isbstutil(root->left,min,root->data-1)&&isbstutil(root->right,root->data+1,max));
}
bool isbst(node* root){
    return isbstutil(root,INT_MIN,INT_MAX);
    }

int main(){
    node* root = NULL;
    root=insert(root,4);
    root=insert(root,5);
    root=insert(root,2);
    root=insert(root,1);
    root=insert(root,3);
    root=insert(root,7);
    root=insert(root,16);
    
    inorder(root);
    cout<<endl;
    if(isbst(root)){
        cout<<" BSt"<<endl;
    }
    else
        cout<<"Not a BST"<<endl;
    return 0;
}
